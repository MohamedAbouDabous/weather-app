{"version":3,"sources":["testWeekWeather.js","HourlyWeather.js","GetLocation.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["testWeekWeather","weeklyWeather","this","props","weekWeather","map","week","index","react_default","a","createElement","className","key","Date","time","toDateString","apparentTemperatureHigh","apparentTemperatureLow","Component","HourlyWeather","hourlyWeathers","hourlyWeather","hour","toLocaleString","temperature","getLocation","state","windGust","humidity","timezone","hourly","sunriseTime","sunsetTime","isCelsius","componentDidMount","_this","toggleTemp","tempApi","setState","prevState","navigator","geolocation","getCurrentPosition","position","axios","get","concat","coords","latitude","longitude","then","res","data","currently","daily","slice","filter","_","i","console","log","_this$state","onClick","testWeekWeather_testWeekWeather","HourlyWeather_HourlyWeather","Header","App","src_Header","GetLocation","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9bef4300.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class testWeekWeather extends Component {\r\n  render() {\r\n\r\n    \r\n    const weekWeather = this.props.weekWeather\r\n    const weeklyWeather = weekWeather.map((week, index) =>\r\n        \r\n        <ul className=\"weekIndex\" key={index}>\r\n            <h4><li>{new Date(week.time * 1000).toDateString('it-IT')}</li></h4>\r\n            <p></p>\r\n            <h6>Max temperature-Celsius/Fahrenheit:  {week.apparentTemperatureHigh}</h6>\r\n            <p></p>\r\n            <h6>Lowest temperature-Celsius/Fahrenheit: {week.apparentTemperatureLow}</h6>\r\n        </ul>\r\n    \r\n)\r\n\r\n    return (\r\n        <div className=\"weekWeather\">\r\n\r\n                <div className=\"weekIndex\">{weeklyWeather}</div>\r\n\r\n        </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class HourlyWeather extends Component {\r\n  render() {\r\n\r\n    const hourlyWeather = this.props.hourlyWeather\r\n    const hourlyWeathers = hourlyWeather.map((hour, index) =>\r\n        <ul className=\"weekIndex\" key={index}>\r\n            <li>\r\n                <h4>{new Date(hour.time * 1000).toLocaleString('it-IT')}</h4>\r\n                <p></p>\r\n                <h6>Celcius/Fahrenheit: {hour.temperature}</h6>\r\n            </li>\r\n        </ul> \r\n    )\r\n    return (\r\n      <div>\r\n         <div>\r\n             {hourlyWeathers}\r\n         </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport TestWeekWeather from './testWeekWeather';\r\nimport HourlyWeather from './HourlyWeather';\r\n\r\nclass getLocation extends Component{\r\n    state = {\r\n    windGust: [ ],\r\n    humidity: [ ],\r\n    timezone: [ ],\r\n    weekWeather: [ ],\r\n    temperature: [ ],\r\n    hourly: [ ],\r\n    sunriseTime: [ ],\r\n    sunsetTime: [ ],\r\n    isCelsius: true\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.toggleTemp()\r\n  }\r\n\r\n  toggleTemp = () => {\r\n    \r\n\r\n    this.setState(prevState => ({\r\n      isCelsius: !prevState.isCelsius\r\n    }))\r\n \r\n    let tempApi\r\n    \r\n    if (this.state.isCelsius) {\r\n      tempApi = \"?units=si\"\r\n    } else {\r\n      tempApi = \"\"\r\n    }\r\n\r\n    \r\n\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n          axios.get(`https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/93ce24f5d5831a1b6eb47d04de207dda/${position.coords.latitude},${position.coords.longitude}${tempApi}`)\r\n      .then(res => {\r\n        this.setState ({\r\n\r\n          windGust: res.data.currently.windGust,\r\n          humidity: res.data.currently.humidity,\r\n          timezone: res.data.timezone,\r\n          temperature : res.data.currently.temperature,\r\n          weekWeather: res.data.daily.data.slice(0,5),\r\n          hourly: res.data.hourly.data.filter((_,i) => i % 3 === 0),\r\n          sunriseTime: res.data.daily.data[0].sunriseTime,\r\n          sunsetTime: res.data.daily.data[0].sunsetTime\r\n          \r\n\r\n\r\n          })\r\n          console.log(res);\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n    render(){\r\n        const { windGust, humidity, timezone, temperature, sunriseTime, sunsetTime } = this.state;\r\n        \r\n        return (\r\n            \r\n            <div className=\"outerBorder\">\r\n            <div className=\"border\">\r\n            <div className=\"getLocation\">\r\n            <button onClick={this.toggleTemp}>Celsius/Fahrenheit</button>\r\n            <p></p>\r\n            <div>Tidszon: {timezone}</div>\r\n            <p></p>\r\n            <div>Vindstyrka: {windGust} Km/Miles</div>\r\n            <p></p>\r\n            <div>Luftfuktighet: {humidity}%</div>\r\n            <p></p>\r\n            <div>Temperatur: {temperature} Celsius/Fahrenheit</div>\r\n            <p></p>\r\n            <div>Soluppgång: {new Date(sunriseTime * 1000).toLocaleString('it-IT')} </div>\r\n            <p></p>\r\n            <div>Solnedgång: {new Date(sunsetTime * 1000).toLocaleString('it-IT')} </div>\r\n            </div>\r\n            </div>\r\n            \r\n            <TestWeekWeather weekWeather = \r\n            {this.state.weekWeather} />\r\n            <HourlyWeather hourlyWeather = \r\n            {this.state.hourly} />\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default getLocation;","import React, { Component } from 'react';\r\n\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <h1 className=\"headerBar\">\r\n            U08-Weather-App\r\n            </h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport GetLocation from './GetLocation';\nimport Header from './Header';\n\n\nclass App extends Component {\n\n  \n  render() {\n    \n    return (\n      <div className=\"App\">\n        <Header />\n        <GetLocation />\n        \n      </div>\n    );\n  }\n\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}